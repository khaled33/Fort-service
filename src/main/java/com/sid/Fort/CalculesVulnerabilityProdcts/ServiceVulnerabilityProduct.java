package com.sid.Fort.CalculesVulnerabilityProdcts;

import com.sid.Fort.QuestionsEntyProduct.Entity.QuestionsEntryProducts;
import com.sid.Fort.QuestionsResponsesScenariosEntryPage.Dao.QuestionsResponsesScenariosRepository;
import com.sid.Fort.QuestionsResponsesScenariosEntryProducts.Dao.QuestionsResponsesScenariosEntryProductsRepository;
import com.sid.Fort.QuestionsResponsesScenariosEntryProducts.Entity.QuestionsResponsesScenariosEntryProducts;
import com.sid.Fort.Scenarios.Dao.ScenariosRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Service
public class ServiceVulnerabilityProduct {

    @Autowired
    private QuestionsResponsesScenariosEntryProductsRepository questionsResponsesScenariosEntryProductsRepository;
    @Autowired
    private QuestionsResponsesScenariosRepository questionsResponsesScenariosRepository;
    @Autowired
    private ScenariosRepository scenariosRepository;

    public void CalculesVulnerabilityProduct(Long id_senario) {

        List<Long> id_Products = questionsResponsesScenariosEntryProductsRepository.findIdProductbyIdSenario(7L);
        double CorrespondingScore;
        double Weights;
        double SomWeights = 0;
        double WeightedScore = 0;

        double Availability_of_Additional_Specific_AML_Controls_Corresponding_Score = 0;
        if (id_Products != null) {
            double Other_Vulnerable_Factors_Overal_lWeighte;
            List<Double> Corresponding_Score_Prodcuts_Other_Vulnerable = new ArrayList<>();
            List<Double> Quality_of_General_AML_Controls = new ArrayList<>();
            double Inherentulnerability;
            double Deficiencyin_Controls_Initial;
            double MinQAC ;
            double Contribution_of_Specific_AML_Controls ;
            double Overall_Quality_of_AML_Controls ;
            double Overall_Deficiency_in_AML_Controls_Final ;
            double Final_Vulnerability ;
            double ResultFinal_Vulnerability;
            for (Long id_Product : id_Products) {

                List<QuestionsResponsesScenariosEntryProducts> Qrs_Prodcuts =
                        questionsResponsesScenariosEntryProductsRepository
                                .findByQuestionsEntryProductsTypeAndScenariosIdAndProductsId(QuestionsEntryProducts.Type.ENTRY_PRODUCT_TYPE, 7L, id_Product);
                List<QuestionsResponsesScenariosEntryProducts> Qrs_ProdcutsOtherVulnerable =
                        questionsResponsesScenariosEntryProductsRepository
                                .findByQuestionsEntryProductsTypeAndScenariosIdAndProductsId(QuestionsEntryProducts.Type.OTHER_VULNERABLE_PRODUCT, 7L, id_Product);

                for (QuestionsResponsesScenariosEntryProducts Qrs : Qrs_Prodcuts) {

                    Weights = Qrs.getQuestionsEntryProducts().getQuestionsWeights().getWeight();
                    CorrespondingScore = Qrs.getCorrespondingScore();
                    SomWeights += Weights;
                    WeightedScore += CorrespondingScore * Weights;




                }

                for (QuestionsResponsesScenariosEntryProducts Qrs : Qrs_ProdcutsOtherVulnerable) {

                    if (!Qrs.getQuestionsEntryProducts().getText().equals("Availability of Additional  Specific AML Controls")) {
                        Corresponding_Score_Prodcuts_Other_Vulnerable.add(Qrs.getCorrespondingScore());
                    } else {
                        Availability_of_Additional_Specific_AML_Controls_Corresponding_Score = Qrs.getCorrespondingScore();
                    }

                }

                Other_Vulnerable_Factors_Overal_lWeighte = Corresponding_Score_Prodcuts_Other_Vulnerable.stream().max(Double::compare).get();

                SomWeights += 3;
                WeightedScore += Other_Vulnerable_Factors_Overal_lWeighte * 3;
                Inherentulnerability = WeightedScore / SomWeights;

                 Inherentulnerability = (double) Math.round(Inherentulnerability * 100) / 100;

                double QualityofGeneralAMLControl = questionsResponsesScenariosRepository.getQualityofGeneralAMLControls(7, scenariosRepository.getOne(7L));
                double QualityofBanksOperations = questionsResponsesScenariosRepository.getQualityofGeneralAMLControls(5, scenariosRepository.getOne(7L));

                Deficiencyin_Controls_Initial = 1 - QualityofGeneralAMLControl;

                Quality_of_General_AML_Controls.add(QualityofBanksOperations);
                Quality_of_General_AML_Controls.add(QualityofGeneralAMLControl);
                Quality_of_General_AML_Controls.add(Availability_of_Additional_Specific_AML_Controls_Corresponding_Score);
                MinQAC = Quality_of_General_AML_Controls.stream().min(Comparator.naturalOrder()).get();

                Contribution_of_Specific_AML_Controls = MinQAC * Deficiencyin_Controls_Initial;

                Overall_Quality_of_AML_Controls = Contribution_of_Specific_AML_Controls + QualityofGeneralAMLControl;
                Overall_Deficiency_in_AML_Controls_Final = 1 - Overall_Quality_of_AML_Controls;

                Final_Vulnerability = ((Inherentulnerability * 3) + (Overall_Deficiency_in_AML_Controls_Final*2)) / 5;

                if (Final_Vulnerability>Inherentulnerability){
                    ResultFinal_Vulnerability=Inherentulnerability;
                }else ResultFinal_Vulnerability=Final_Vulnerability;
                ResultFinal_Vulnerability= (double) Math.round(ResultFinal_Vulnerability * 100) / 100;


                System.out.println("Overall_Quality_of_AML_Controls\n");
                System.out.println(QualityofGeneralAMLControl);

                System.out.println("Deficiencyin_Controls_Initial\n");
                System.out.println(Deficiencyin_Controls_Initial);

                System.out.println("Quality of Specific AML Controls\n");
                System.out.println(MinQAC);

                System.out.println("Contribution_of_Specific_AML_Controls\n");
                System.out.println(Contribution_of_Specific_AML_Controls);

                System.out.println("Overall_Quality_of_AML_Controls\n");
                System.out.println(Overall_Quality_of_AML_Controls);

                System.out.println("Overall Deficiency in AML Controls (Final)\n");
                System.out.println(Overall_Deficiency_in_AML_Controls_Final);

                System.out.println("Inherent Vulnerability\n)");
                System.out.println(Inherentulnerability);

                System.out.println("Final_Vulnerability\n");
                System.out.println(ResultFinal_Vulnerability);


            }
        }
    }
}
