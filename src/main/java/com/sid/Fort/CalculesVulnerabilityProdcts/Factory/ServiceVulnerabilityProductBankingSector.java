package com.sid.Fort.CalculesVulnerabilityProdcts.Factory;

import com.sid.Fort.AnalyseOperation.ChatVulProduct.Dao.ChatVulProductRepository;
import com.sid.Fort.AnalyseOperation.ChatVulProduct.Entity.ChatVulProduct;
import com.sid.Fort.Products.Dao.ProductsRepository;
import com.sid.Fort.Products.Entity.Products;
import com.sid.Fort.QuestionsEntyProduct.Entity.QuestionsEntryProducts;
import com.sid.Fort.QuestionsResponsesScenariosEntryPage.Dao.QuestionsResponsesScenariosRepository;
import com.sid.Fort.QuestionsResponsesScenariosEntryProducts.Dao.QuestionsResponsesScenariosEntryProductsRepository;
import com.sid.Fort.QuestionsResponsesScenariosEntryProducts.Entity.QuestionsResponsesScenariosEntryProducts;
import com.sid.Fort.Scenarios.Dao.ScenariosRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.NoSuchElementException;
@Service
public class ServiceVulnerabilityProductBankingSector implements CalculesVulnerabilityProduct {

    @Autowired
    private QuestionsResponsesScenariosEntryProductsRepository questionsResponsesScenariosEntryProductsRepository;
    @Autowired
    private QuestionsResponsesScenariosRepository questionsResponsesScenariosRepository;
    @Autowired
    private ScenariosRepository scenariosRepository;
    @Autowired
    private ChatVulProductRepository chatVulProductRepository;

    @Autowired
    private ProductsRepository productsRepository;

    @Override
    public void CalculesVulnerabilityProducts(Long id_senario, Long id_Opiration) {

        List<Long> id_Products = questionsResponsesScenariosEntryProductsRepository.findIdProductbyIdSenario(id_senario);


        double Availability_of_Additional_Specific_AML_Controls_Corresponding_Score = 0;
        if (id_Products != null) {

            for (Long id_Product : id_Products) {
                List<Double> Quality_of_General_AML_Controls = new ArrayList<>();
                double CorrespondingScore;
                double Weights;
                double SomWeights = 0;
                double WeightedScore = 0;
                double Other_Vulnerable_Factors_Overal_lWeighte;
                List<Double> Corresponding_Score_Prodcuts_Other_Vulnerable = new ArrayList<>();
                double Inherentulnerability;
                double Deficiencyin_Controls_Initial;
                double MinQAC;
                double Contribution_of_Specific_AML_Controls;
                double Overall_Quality_of_AML_Controls;
                double Overall_Deficiency_in_AML_Controls_Final;
                double Final_Vulnerability;
                double ResultFinal_Vulnerability;
                List<QuestionsResponsesScenariosEntryProducts> Qrs_Prodcuts;
                List<QuestionsResponsesScenariosEntryProducts> Qrs_ProdcutsOtherVulnerable;
                ChatVulProduct chatVulProduct = new ChatVulProduct();


                Qrs_Prodcuts =
                        questionsResponsesScenariosEntryProductsRepository
                                .findByQuestionsEntryProductsTypeAndScenariosIdAndProductsId(QuestionsEntryProducts.Type.ENTRY_PRODUCT_TYPE, id_senario, id_Product);
                Qrs_ProdcutsOtherVulnerable =
                        questionsResponsesScenariosEntryProductsRepository
                                .findByQuestionsEntryProductsTypeAndScenariosIdAndProductsId(QuestionsEntryProducts.Type.OTHER_VULNERABLE_PRODUCT, id_senario, id_Product);

                for (QuestionsResponsesScenariosEntryProducts Qrs : Qrs_Prodcuts) {

                    Weights = Qrs.getQuestionsEntryProducts().getQuestionsWeights().getWeight();
                    CorrespondingScore = Qrs.getCorrespondingScore();
                    SomWeights += Weights;
                    WeightedScore += CorrespondingScore * Weights;


                }

                for (QuestionsResponsesScenariosEntryProducts Qrs : Qrs_ProdcutsOtherVulnerable) {

                    if (!Qrs.getQuestionsEntryProducts().getText().equals("Availability of Additional Specific AML Controls")) {
                        Corresponding_Score_Prodcuts_Other_Vulnerable.add(Qrs.getCorrespondingScore());

                    } else if (Qrs.getQuestionsEntryProducts().getText().equals("Availability of Additional Specific AML Controls")) {
                        Availability_of_Additional_Specific_AML_Controls_Corresponding_Score = Qrs.getCorrespondingScore();
                        System.out.println(Availability_of_Additional_Specific_AML_Controls_Corresponding_Score);

                    }

                }

                try {

                    Other_Vulnerable_Factors_Overal_lWeighte = Corresponding_Score_Prodcuts_Other_Vulnerable.stream().max(Double::compare).get();


                    SomWeights += 3;
                    WeightedScore += Other_Vulnerable_Factors_Overal_lWeighte * 3;
                    Inherentulnerability = WeightedScore / SomWeights;


                    Inherentulnerability = (double) Math.round(Inherentulnerability * 100) / 100;
                    double QualityofGeneralAMLControl;
                    if (questionsResponsesScenariosRepository.getINTERMEDIATE_VARIABLE_TYPE(7, scenariosRepository.getOne(id_senario)) != null) {


                        QualityofGeneralAMLControl = questionsResponsesScenariosRepository.getINTERMEDIATE_VARIABLE_TYPE(7, scenariosRepository.getOne(id_senario));
                        double QualityofBanksOperations = questionsResponsesScenariosRepository.getINTERMEDIATE_VARIABLE_TYPE(5, scenariosRepository.getOne(id_senario));
                        Deficiencyin_Controls_Initial = 1 - QualityofGeneralAMLControl;

                        Quality_of_General_AML_Controls.add(QualityofBanksOperations);


                        Quality_of_General_AML_Controls.add(QualityofGeneralAMLControl);
                        Quality_of_General_AML_Controls.add(Availability_of_Additional_Specific_AML_Controls_Corresponding_Score);
                        MinQAC = Quality_of_General_AML_Controls.stream().min(Comparator.naturalOrder()).get();

                        Contribution_of_Specific_AML_Controls = MinQAC * Deficiencyin_Controls_Initial;

                        Overall_Quality_of_AML_Controls = Contribution_of_Specific_AML_Controls + QualityofGeneralAMLControl;
                        Overall_Deficiency_in_AML_Controls_Final = 1 - Overall_Quality_of_AML_Controls;


                        Final_Vulnerability = ((Inherentulnerability * 3) + (Overall_Deficiency_in_AML_Controls_Final * 2)) / 5;

                        if (Final_Vulnerability > Inherentulnerability) {
                            ResultFinal_Vulnerability = Inherentulnerability;
                        } else ResultFinal_Vulnerability = Final_Vulnerability;
                        ResultFinal_Vulnerability = (double) Math.round(ResultFinal_Vulnerability * 100) / 100;


                        Products products = productsRepository.getOne(id_Product);

                        chatVulProduct.setId_Scenario(id_senario);
                        chatVulProduct.setProducts(products);
                        chatVulProduct.setOperation(id_Opiration);

                        chatVulProduct.setTextProducts(products.getLabel());
                        chatVulProduct.setVulnerabiliteInherente(Inherentulnerability);
                        chatVulProduct.setVulnerabiliteFinale(ResultFinal_Vulnerability);

                        ChatVulProduct exsist = chatVulProductRepository.getByProductsIdAndOperation(id_senario, id_Opiration, id_Product);
                        if (exsist != null) {
                            exsist.setVulnerabiliteInherente(Inherentulnerability);
                            exsist.setVulnerabiliteFinale(ResultFinal_Vulnerability);

                            chatVulProductRepository.save(exsist);


                        } else chatVulProductRepository.save(chatVulProduct);


                    }
                } catch (NoSuchElementException noSuchElementException) {
                    ;
                }

            }
        }
    }
}
